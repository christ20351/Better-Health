generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output       = "../src/db"
  fileName     = "types.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified Boolean    @default(false)
  // tokenRefresh  String
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  doctor        Doctor?
  patient       Patient?
  worskspace    Workspace?
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}
model Patient {
  id            String         @id @default(cuid())
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id])
  birthday      DateTime
  placeOfBirth  String
  city          String
  age           Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  symptoms      Symptom[]
  appointments  Appointment[]
  diagnostics   Diagnostic[]
  messages      messages[]

  @@map("patients")
}

model Doctor {
  id             String        @id @default(cuid())
  userId         String        @unique
  user           User          @relation(fields: [userId], references: [id])
  city           String
  specialisation String
  diagnostics    Diagnostic[]
  appointments   Appointment[]
  workspaceId    String
  workspace      Workspace     @relation(fields: [workspaceId], references: [id])

  @@map("doctors")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  address     String
  phone       String
  adminId     String   @unique
  admin       User     @relation(fields: [adminId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  doctors     Doctor[]

  @@map("workspace")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Conversation {
  id        String   @id @default(cuid())
  patientId String
  IA        String   @default("with IA")
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient  Patient    @relation(fields: [patientId], references: [id])
  messages messages[]

  @@map("conversations")
}

model messages {
  id             String   @id @default(cuid())
  conversationId String
  patientId      String
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id])
  patient      Patient      @relation(fields: [patientId], references: [id])

  @@map("messages")
}

model Specialisation {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("specialisations")
}

// model disponibility {
//   id          String   @id @default(cuid())
//   doctorId    String
//   dayOfWeek   Int
//   startTime   DateTime
//   endTime     DateTime
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   doctor Doctor @relation(fields: [doctorId], references: [id])

//   @@map("disponibilities")
// }

model Symptom {
  id        String   @id @default(cuid())
  symptom   String[]
  patientId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient     Patient      @relation(fields: [patientId], references: [id])
  diagnostics Diagnostic[]

  @@map("symptoms")
}

model Diagnostic {
  id          String   @id @default(cuid())
  isGivenByIA Boolean  @default(false)
  patientId   String
  doctorId    String?
  symptomId   String
  diagnostic  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])
  doctor  Doctor? @relation(fields: [doctorId], references: [id])
  symptom Symptom @relation(fields: [symptomId], references: [id])

  @@map("diagnostics")
}

model Appointment {
  id              String   @id @default(cuid())
  patientId       String
  doctorId        String
  dateAppointment DateTime
  hourOfBegin     DateTime
  hourOfEnd       DateTime

  patient Patient @relation(fields: [patientId], references: [id])
  doctor  Doctor  @relation(fields: [doctorId], references: [id])

  @@map("appointements")
}
